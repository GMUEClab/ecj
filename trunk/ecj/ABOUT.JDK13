[Note: ECJ runs great on all versions of Java 1.1 and up.  The 1.3-and-up
issue below ONLY matters if you care about strict replicability between
different virtual machines -- most people would not]

In Java JDK 1.3, Sun introduced a new math policy: virtual machines may elect,
if they choose, to replace Sun's floating-point math rules with their own.
Unfortunately, Sun got it backwards: they set it up so that if you *don't*
want this to happen in your code, you have to explicitly say so.  However,
the "saying so" is invalid syntax in earlier versions of the JDK!!!  This
puts me in quite a quandary with regard to ECJ's guarantees of replicability.

Even now, Microsoft's default VM has decided that it's going to be
floating-point-incompatible with the rest of the world.  So you'll get different
results if you use a 1.3-VM in Windoze (argh).  Presently Sun, BSD, Linux,
MacOS, and MacOS X are still producing the same results with each other.

So here's the deal.  If you use JDK 1.2.x or below, your results should be
replicable with similar people running anything in this range.  If you use
JDK 1.3 or above, your results are only guaranteed to be replicable with 
the JDK 1.2 folks and with other JDK 1.3 folks only if you do the following:

	1. On every class which uses float or double in anyway, change
	   class foo to    class strictfp foo
	2. Replace all usage of Math.foo with StrictMath.foo

What a chore!  The worst part is, once you modify this code, you can't use
it on 1.2.x anymore, so I can't distribute it in this form!  This is forcing
a split in the codebase, which I'm not willing to do.  So I'm going to wait
it out until 1.3 becomes more prevalent, then make the jump to a 1.3-only 
codebase, with strictfp and StrictMath in place.  That's the plan, anyway.

Sean
