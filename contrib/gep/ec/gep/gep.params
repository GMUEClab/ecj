# This parameter file provides basic GEP-specific setting and options.
# 
# Some rules about Java Property Lists, which is what the
# system uses for parameters.  Java property lists are a little weird:
# 
# 1. Lines with only whitespace are ignored.
# 2. Lines beginning with a # are ignored.
# 3. Initial whitespace is trimmed.  The property is everything up to 
#    the next chunk of whitespace or a '='
# 4. A following '=' is *optional*
# 5. After the chunk of whitespace and the optional '=', the next
#    whitespace is trimmed.
# 6. Typically, EVERYTHING after that is the value of the property, 
#    up to but not including a '\n'. However, my version trims off
#    the final bit of whitespace if any.
# 7. If two parameters of the same name are found, the later one
#    is used.
#
# Some examples and warnings:
#
# LINE (begins at | )          PROPERTY(between /'s)  VALUE(between /'s)
#
# |yo.yo.yo! = heave ho               /yo.yo.yo!/            /heave ho/
# |my parameter                       /my/                   /parameter/
# |my=parameter                       /my/                   /parameter/
# |my= parameter                      /my/                   /parameter/
# |
# |#this is a comment
# |    # this is NOT                  /#/                    /this is NOT/
# |
# |   my    =parameter                /my/                   /parameter/
# |my parameter = this                /my/                   /parameter = this/
# |myparameter=                       /myparameter/          //
# |myparameter                        /myparameter/          //
# |=myparameter                       //                     /myparameter/
# |watch out here!                    /watch/                /out here!/
# |comments=don't work  #see?         /comments/             /don't work  #see?/
#
#
#
#
# This file has info about the parameters that can or must be set for gep
# projects. Defaults are supplied where necessary.

# My parent: probably should not change this (it should link to the basic ec parameter file)
parent.0 =				../ec.params

# Problem --- specified by the user's param file
#===============================
# eval.problem = ec.gep.test.test2
#
# specifies the user's GEPProblem class that he created for his problem.
#
# In this GEP implementation if the user wants to just take a default route 
# and NOT create any code at all, he can use the default class 
#
#				ec.gep.GEPDefaultUserProg. 
#
# He will then also specify a 'fitness-function' to use by setting the eval.fitness-function 
# parameter to one of: (check the GEPFitnessFunction.java class for the latest list of these)
#
# AEWSR (Absolute Error with Selection Range) 
#	AH (Absolute/Hits)
#	MSE (mean squared error) 
#	RMSE (root mean squared error) 
#	MAE (mean absolute error) 
#	RSE (relative squared error) 
#	RRSE (root relative squared error) 
#	RAE (relative absolute error) 
#	REWSR (Relative Error with Selection Range) 
#	RH (Relative/Hits) 
#	rMSE (relative MSE) 
#	rRMSE (relative RMSE) 
#	rMAE (relative MAE) 
#	rRSE (relative RSE) 
#	rRRSE (relative RRSE) 
#	rRAE (relative RAE) 
#	RS (R-square) 
#	CC (Correlation Coefficient) 
#	NH (Number of Hits) 
#	NHWP(Number of Hits with Penalty) 
#	ACC (Accuracy) 
#	SACC (Squared Accuracy) 
#	SS (Sensitivity/Specificity) 
#	PPNVP (PPV/NPV Positive Predictive Value / Negative Predictive Value ) 
#	SSPN (Sensitivity/Specificity/PPV/NPV ) 
#	WCorrRMSE (Weighted correlation coefficient and Root Mean Squared Error)
#       MCSCE1   (Simple classification error for multiple chromosome classification problems)
#       MCSCE2   (Simple classification error for multiple chromosome classification problems)
#       MCSCE3   (Simple classification error for multiple chromosome classification problems)
#       MCMSE (MultipleChromosome Mean Squared Error) 
#       SEWD (Sammon Error With Dissimilarity) - used only when multiple chromosomes
#
# Case is important in these names! Also a few of the functions require 
# extra double parameters beyond the GEPIndividual 1st parameter,
# like AHfitness(GEPIndividual, double) which requires that a precision be
# specified. To do this the user can add the numeric values in the parameters
# eval.problem.fitness-function-arg0 and eval.problem.fitness-function-arg1
#
# for example to use the RH function one would specify:
# eval.problem = ec.gep.GEPDefaultUserProg
# eval.problem.fitness-function = RH
# eval.problem.fitness-function-arg0 = 2.0
#
# Also note that one can also control how the ideal fitness is determined. 
# Ideal fitness is used to decide if we should quit doing more generations when 
# the parameter stop-on-run-complete is set to true. The parameter 
# fitness-function-ideal-percent-threshold is the % of the maximum fitness value associated
# with each fitness function (normally 1000) that is required for a fitness
# value to be considered ideal; So if the max fitness value is 1000 and the 
# ideal % threshold is set to 99.9 then a fitness value >= 999 will be considered ideal; 
# By default the fitness-function-ideal-percent-threshold is 99.999999 so a value >= 999.99999
# (assuming the max fitness value is 1000) will be ideal. 
#
# eval.problem.fitness-function-ideal-percent-threshold = 99.999999

# ec.Evolve
# ==============================

# we want store announcements in memory, so...
store = 				true

# totally verbose (see ECJ documentation for the various values of verbosity ... 0, 1000, 2000, etc.)
verbosity = 				0

# flush output immediately, don't buffer it
flush = 				true

# one thread  - could have multiple threads but it would NOT work as per the GeneXProTools system
#               and it is not tested at all! Probably best to NOT change this.
#               Simple testing shows it's probably OK to have more than 1 eval thread BUT only 1 breeding thread will work properly!
evalthreads = 				1
breedthreads = 				1

# a good random seed for thread 0  - as per ec.params but we might want a different one for gep
# seed.0 = 				time
seed.0 = 				4357


# ec.EvolutionState
# ==============================

# We're not writing checkpoint files.  If we were, we'd do it every
# generation, and the prefix to all the files would be "ec.*" as specified here
checkpoint =				      false
# checkpoint-modulo =     1
# prefix = 				        ec

# simple generational evolution -- don't change this
state = 				ec.simple.SimpleEvolutionState

# We're using the GEP initialization method (required for GEP problems -- or some modified variation of this)
init = 					ec.gep.GEPInitializer

# We're using the standard (empty) finalization method by default
finish = 	        	ec.simple.SimpleFinisher

# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger

# We're using standard breeding -- no cross-population breeding (do NOT change for GEP)
breed =					ec.simple.SimpleBreeder

# We're using standard evaluation -- no coevolution (do NOT change for GEP)
eval =					ec.simple.SimpleEvaluator

# Parameter 'generations' specifies the maximum number of generations to run the system.
# Parameter 'quit-on-run-complete' determines if the run can quit prior to reaching the 
# maximum number of generations. If true and a fitness is found to be an 'ideal' 
# fitness then the run will stop. If 'false' then the run will continue until the maximum
# number of generations has been reached.
# Parameter 'fitness-function-ideal-percent-threshold' specifies a percentage of the maximum
# fitness value (MaxThreshold) that must be reached to be considered an ideal fitness value;
# The default value is 99.999999; so if the maximum fitness value is 1000 and the
# fitness-function-ideal-percent-threshold is set to 99.9 then a fitness value >= 999 will 
# be considered ideal; by default a value >= 999.99999 will be ideal.
#
# Note that the parameters 'generations' and 'quit-on-run-complete' are standard ECJ parameters.
# The parameter 'fitness-function-ideal-percent-threshold' was added in ECJ-GEP to allow some
# control on the meaning of reaching an 'ideal' fitness.
#
# The values below would allow the system to run for 100 generations, 
# but quit prematurely if I find something ideal
# (default values only)
generations =				        100
quit-on-run-complete =			true
#fitness-function-ideal-percent-threshold = 99.0

# ec.Population
# ==============================

pop = 					ec.Population  

# No multiple populations for gep so subpops should always be 1
# and must always use GEPSubpopulation
pop.subpops =				1
pop.subpop.0 = 			ec.gep.GEPSubpopulation


# ec.Subpopulation
# ==============================
# don't bother trying to eliminate duplicates from the
# initial population
pop.subpop.0.duplicate-retries =	0

# Do try to get initial population with non-zero fitness values.
# This tries to ensure we start with a population that has few poor 
# individuals with a fitness value of zero.
pop.subpop.0.zero-fitness-retries = 10

# subpop size is 30 individuals -- example only -- you will likely want to modify this for your problems
pop.subpop.0.size =			30

# You might change the species, but it must be a GEPSpeciesForm!
pop.subpop.0.species = 			  ec.gep.GEPSpecies

# Must have GEPIndividuals!
pop.subpop.0.species.ind = 		ec.gep.GEPIndividual

# may want to turn on/off simplifying expressions when human readable form of individual is printed
# (careful since the meditor.jar file must be in start directory and it has been know to cause
# crashes or no terminating loops for some expressions)
pop.subpop.0.species.ind.simplify-expressions = false

# use SimpleFitness for the subpop
pop.subpop.0.species.fitness =			ec.simple.SimpleFitness


# ec.Species
# ==============================
# standard defaults for the evolutionary parameters as suggested by Ferreira
gep.species.inversion-prob         = 0.1
gep.species.mutation-prob          = 0.044
gep.species.istransposition-prob   = 0.1
gep.species.ristransposition-prob  = 0.1
gep.species.onepointrecomb-prob    = 0.3
gep.species.twopointrecomb-prob    = 0.3
gep.species.generecomb-prob        = 0.1
gep.species.genetransposition-prob = 0.1

# Constants can not be used with Logical problem types ... will be ignored if specified
gep.species.use-constants             = false
# examples for constants if used
# gep.species.numconstantspergene       = 10
# gep.species.integer-constants         = true
# gep.species.constants-lowerlimit      = 0
# gep.species.constants-upperlimit      = 100
# can always default to these values as suggested by Ferreira
gep.species.rnc-mutation-prob         = 0.01
gep.species.dc-mutation-prob          = 0.044
gep.species.dc-inversion-prob         = 0.1
gep.species.dc-istransposition-prob   = 0.1

# the size of the Karva expressions is given by the number of genes and the 
# size of the head of each gene in the chromosome.
gep.species.numchromosomes = 1
gep.species.numgenes = 3
gep.species.gene-headsize = 8

# The linking function is used to combine the expressions from each gene
# into an expression for the entire chromosome.
# The linking function may be one of +, -, * or / for most problems
# and for logic problems can be one of: and, or, nand, nor, xor, nxor.
# NOTE: the above is historical since now you can use ANY of the functions
#       defined as a GEPFunctionSymbol (Add, Sub, Iflt4, etc.); for the
#       GEPFunctionSymbols you need to use the proper case in the name when
#       specifying it! The arity of the function does not have to be 2 BUT
#       the arity of the linking function must suit the number of genes.
#
#       Arity MUST be at least 2;
#          if arity is 2 ... any number of genes is OK
#          if arity is 3 ... must be 3, 5, 7, 9, etc genes
#          if arity is 4 ... must be 4, 7, 10, 13, etc genes
#          and so on ...
#
# Default specified here is +
gep.species.gene-linking-function = +

# Problem type must be one of: functionfinding, classification, timeseries, logical
# Set default to be 'unknown' so user is forced to specify in the problem params file 
gep.species.problemtype = unknown

# If the problem is a classification type problem a threshold value (used
# to convert real values to 0 or 1 during fitness calculations) must be 
# specified (do not specify this unless it IS a classification type problem).
# gep.species.classification-threshold  = 0.5

# If the problem type is timeseries then the user can provide the raw time series data 
# (in a file or from the user program) or the processed data in the same format as
# other problem types ... see below. If using raw data then the user must specify: 
#   timeseries-delay -- if 1 uses each time series value, if 2 uses every other one, etc.
#   timeseries-embeddingdimension -- determines the number of timeseries points to use 
#        as independent variables when transforming the set of time series data. Another
#        data point is used as the dependent variable value. So the time series 'raw' data
#        consisting of a list of single values is processed by splitting the data into
#        groups (rows) of size embeddingdimension+1. From the end of the time series data
#        embeddingdimension+1 values are chosen (if delay is 1 all values are chosen, if 
#        2 every other one is chosen). The last value is the independent variable value.
#        Then the next row is selected by moving 'delay'
#        values from the end and chosing embeddingdimension+1 values. This is repeated
#        until no more sets of size embeddingdimension+1 can be chosen. If this produces
#        n sets of data then testingprediction of them are used for testing and
#        (n - testingpredictions) are used for training.
#
#        So if we had the data:
#        1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
#        and delay was 1 and embeddingdimension was 4 then we'd process the set into 
#        the following 17 data sets. If testingpredictions was 6 then the 1st 11
#        would be used for training and the LAST 6 for testing
#        iv1 iv2 iv3 iv4  dv
#          1   2   3   4   5
#          2   3   4   5   6
#          3   4   5   6   7
#              . . .
#         14  15  16  17  18
#         15  16  17  18  19
#         16  17  18  19  20
#         17  18  19  20  21
#        If delay was 2 then 7 sets would be formed as:
#        iv1 iv2 iv3 iv4  dv
#          1   3   5   7   9
#          3   5   7   9  11
#              . . .
#          9  11  13  15  17
#         11  13  15  17  19
#         13  15  17  19  21
#   timeseries-testingpredictions -- specifies the number of sets of data to devote to testing
#
# gep.species.timeseries-delay    1
# gep.species.timeseries-embeddingdimension 4
# gep.species.timeseries-testingpredictions 6           

# Specifying the symbols to be used (functions and terminals)
# user provides exact values as required

# Do NOT change the species symbolset... must be GEPSymbolSet
gep.species.symbolset   = ec.gep.GEPSymbolSet

# symbolset.name is not actually used since we only have one symbol 
# set at this time BUT a name must be specified so do it in the default params
gep.species.symbolset.name = ss0
#
# For the functions you need to indicate how many to use, their names and the weight to
# be used when deciding (randomly) how many of each to allocate in an expression.
# gep.species.symbolset.functionsize = 4
# gep.species.symbolset.function.0 = Add
# gep.species.symbolset.function.0.weight = 1
# gep.species.symbolset.function.1 = Sub
# gep.species.symbolset.function.1.weight = 1
# gep.species.symbolset.function.2 = Mul
# gep.species.symbolset.function.2.weight = 1
# gep.species.symbolset.function.3 = Div
# gep.species.symbolset.function.3.weight = 1
#
# The terminal symbols can be specified directly ...
# gep.species.symbolset.terminalsize = 1
# gep.species.symbolset.terminal.0 = x
#
# OR for the terminal set the info can be in a text file which
# has the names of the terminal symbols and the dependent variable
# in the first record/line (comma separated, space separated, tab separated, etc).
# If the filename ends with .dat then a space is the delimeter, otherwise it
# is assumed to be a comma delimiter. However, the separator can be
# specified directly by including a terminalfileseparator parameter.
# The training values for the terminal symbols are in the other 
# records of the file; the number of terminals is computed from the number of terminal
# symbols in the 1st record. So a file might look like:
# x1, x2, x3, dvar
# 0.5, 0.6, 0.7, 1.8
# 0.1, 0.2, 0.3, 0.6
# ...
# 1.0, 2.0, 3.0, 6.0
#
# Can use "," or "comma" to specify a comma separator
# Can use "\\t" or "tab" to specify a tab separator
# Use "space" to specifiy a space as the separator
# The field separator defaults to 'comma' unless the filename ends in .dat in
# which case it defaults to a space. The separator can be
# changed by including a terminalfileseparator parameter.
#
# gep.species.symbolset.terminalfilename = filename
# gep.species.symbolset.terminalfileseparator = ,
# or for a tab
# gep.species.symbolset.terminalfileseparator = tab
# or for a space
# gep.species.symbolset.terminalfileseparator = space
#
# NOTE for a time series problem do NOT specify the terminals. They will
# be detemined automatically as the time series data is processed. Also
# for time series problems a data file will have only a list of data values
# in the file. The first row will NOT have terminal symbol names. The
# data values in a file can have 1 or more values per row (separated by commas
# or tabs as specified).
#
# Can also have a text file with the TESTING data values...it will use the same separator
# as the file with the training data and terminal symbol (variable) names. In this
# case there is NO line with the terminal symbol names! Also for a timeseries data file the 
# test data and the training data are in the same file (specified by terminalfilename). 
# The gep.species.timeseries-testingpredictions indicates how many rows of the data 
# set to use for testing (after the timeseries file has been processed as described
# above); the remaining rows are used for training. 
#
# NOTE: the text files can be gzip'd files (.gz of .gzip extensions) and there is no 
# need to uncompress them. So you might have the file abc.txt.gz and we will treat it as if it were
# the file abc.txt.
#      
# gep.species.symbolset.testingdatafilename = testDataFileName


# For GEP systems breeding should be as shown below ... changing them 
# is possible but will not be as per original gep by Ferreira (as in GeneXProTools)
gep.species.pipe = ec.gep.breed.DcGeneticOperatorsPipeline
gep.dcgeneticoperators.source.0 = ec.gep.breed.GenerecombinationPipeline
gep.generecombination.source.0 = ec.gep.breed.TwopointrecombinationPipeline
gep.twopointrecombination.source.0 = ec.gep.breed.OnepointrecombinationPipeline
gep.onepointrecombination.source.0 = ec.gep.breed.GenetranspositionPipeline
gep.genetransposition.source.0 = ec.gep.breed.RIStranspositionPipeline
gep.RIStransposition.source.0 = ec.gep.breed.IStranspositionPipeline
gep.IStransposition.source.0 = ec.gep.breed.InversionPipeline
gep.inversion.source.0 = ec.gep.breed.MutationPipeline
# FitProportionateSelection (roulette selection) is used exclusively by Ferreira - could be changed
gep.mutation.source.0 = ec.select.FitProportionateSelection

# 1 is the default and only value used by Ferreira (could be changed to operate differently than Ferreira
# or to make sure we have the k best individuals in the final generation)
breed.elite.0 = 			1

# ec.SimpleStatistics
# ==============================

# Output statistics to the file "out.stat" in the directory
# the run was started in
# GEPSimpleStatistics has a number of parameters it
# can use to control the output:
#   file - The main output is directed to the file specified by the file param
#   file-observed-versus-computed - this file, if specified, gets the results
#         of the best of run model by listing the observed values versus
#         the model's predicted values (useful for plotting). By default this
#         will include the training and testing data values (with test values
#         appended to the end if they exist). To get the training and testing
#         values separated identify a second file in the paramater 
#         file-observed-versus-computed-test. If not specified prints to the 
#         main output file if specified or to the console.
#   file-observed-versus-computed-test - If specificed, this identifies a
#         a file with only the test data. If not specified prints to console.
#   no-observed-versus-computed - if true then don't print any observed/computed values
#         even if files are specified
#  
#   detail-to-log - the user can specify the detail of the output to the main
#         log file (param 'file')
#             all - it can display the best model from every generation (can be a large
#                   amount of output)
#             change - logs the best model of the generation when the fitness improves (default)
#             final - logs only the best of run model information
#   number-of-best-to-log  - this indicates the number of best individuals to display in the final
#         statistics output; normally 1 to display only the single best individual of the run
stat =					ec.gep.GEPSimpleStatistics
stat.file				$out.stat
stat.number-of-best-to-log = 1
# stat.file-observed-versus-computed = ourOvsC.stat
# stat.file-observed-versus-computed-test = ourOvsCtest.stat
# stat.detail-to-log = change

# Statistics -- examples for setting multiple stats packages
# user specifies in his param file
# stat.num-children = 3
# stat.child.0 = ec.gep.test.SimpleXYSeriesChartStatistics
# stat.child.0.title = Best of Generation
# stat.child.0.x-axis-label = generation
# stat.child.0.y-axis-label = fitness
# stat.child.1 = ec.simple.SimpleShortStatistics
# stat.child.1.file = simpleshortstats.txt
# stat.child.1.gather-full = true
# stat.child.2 = ec.gep.GEPSimpleStatistics
# will write to console if file not specified
#stat.child.2.file = simplestats.txt
#stat.child.2.file-observed-versus-computed = simplestatsOvsC.txt



