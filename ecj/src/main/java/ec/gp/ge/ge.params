
# Copyright 2010 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

# We don't include koza.params as a parent here -- doing so creates
# lots of parameter file inheritance problems.  Instead you should
# include this parameter file FIRST, and then include something 
# which ultimately includes the koza.params parameter file later.


# The problem is redefined as a GEProblem.  The ACTUAL problem
# will be defined in eval.problem.problem

eval.problem = ec.gp.ge.GEProblem

pop.subpop.0.duplicate-retries = 100

pop.subpop.0.species = ec.gp.ge.GESpecies
pop.subpop.0.species.parser = ec.gp.ge.GrammarParser

# The individual is a GEIndividual
pop.subpop.0.species = ec.gp.ge.GESpecies
pop.subpop.0.species.ind = ec.gp.ge.GEIndividual
pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness

# We'll allow 256 possibilities per gene (the maximum anyway
# since GEIndividual is a ByteVectorIndividual).  Crossover-type
# is entirely unused.
pop.subpop.0.species.min-gene = -128
pop.subpop.0.species.max-gene = 127
pop.subpop.0.species.mutation-prob = 0.01
pop.subpop.0.species.crossover-type = one

# Individuals are built using geometric series.  The minimum allowed size is 5. 
pop.subpop.0.species.genome-size = uniform
pop.subpop.0.species.min-initial-size = 15
pop.subpop.0.species.max-initial-size = 25

# The following pipeline is relatively common in GE.
# The BufferedBreedingPipeline forces two individuals at a time
# in the steady state case (see the manual on steady state evolution),
# but otherwise is relatively harmless for generational unless for
# some insane reason you have a population with an odd numbered size.

pop.subpop.0.species.pipe = ec.breed.BufferedBreedingPipeline
pop.subpop.0.species.pipe.num-inds = 1
pop.subpop.0.species.pipe.likelihood = 1.0
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.0.likelihood = 1.0
pop.subpop.0.species.pipe.source.0.source.0 = ec.gp.ge.breed.GECrossoverPipeline
pop.subpop.0.species.pipe.source.0.source.0.likelihood = 0.9
pop.subpop.0.species.pipe.source.0.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.source.1 = same
select.tournament.size = 7

# By default we don't allow wrapping
ge.species.passes = 1
# init-scheme
ge.species.init-scheme = default


# Build the dummy GP Individual information.  This stuff is necessary to convince
# GP that all is well and good with the trees that GE is creating and handing to
# GP to evaluate.

pop.subpop.0.species.gp-species = ec.gp.GPSpecies
pop.subpop.0.species.gp-species.fitness = ec.gp.koza.KozaFitness
pop.subpop.0.species.gp-species.ind = ec.gp.GPIndividual
pop.subpop.0.species.gp-species.ind.numtrees = 1
pop.subpop.0.species.gp-species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.gp-species.ind.tree.0.tc = tc0
# We'll never use this, so let's set it to Reproduction, which is simple
pop.subpop.0.species.gp-species.pipe = ec.breed.ReproductionPipeline
pop.subpop.0.species.gp-species.pipe.num-sources = 1
pop.subpop.0.species.gp-species.pipe.source.0 = ec.select.TournamentSelection

# stat = ec.simple.SimpleShortStatistics
